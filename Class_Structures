#!usr/bin/python3.6

class structures:
    
    """This is a class to create crystal structures and molecule polymorths.
    functions include supercell, slab, and quaternion rotation"""
    
    import numpy as np
    
    def __init__(self,UnitCell,UnitAtoms):
        
        """initial data: UnitCell(box) is a (3x3) matrix
            K is the position of atoms in the unitcell, it is either direct(fractional) or cart(real)"""

        self.UC = UnitCell
        self.K = UnitAtoms
        
    
    def Unit_AtomsCoord(self):
        
        """This function finds the coordinate of atoms in the unitcell."""
        
        K = self.K
        LVec = self.UC
        cond = []
        Coord_Type = None
        
        
        for i in range(len(K)):
            c = all(K[i,j] <= 1. for j in range(len(K.T)))
            cond.append(c)
        
        for j in range(len(cond)):
            
            if cond[j]==False:
                Coord_Type = "Cart"
                break
                
            Coord_Type = "Direct"
        
        
        if Coord_Type=="Cart":
            return(K)
        
        else:
            return(K@LVec)
        
        
        
    def SuperCell(self,Boundary):
        
        """This function get the unitcell atom coordinates from Unit_AtomsCoord output, 
        and makes a (nxmxl) supercell."""
        
        UC_Atoms = self.Unit_AtomsCoord()
        nv = Boundary
        
        
        """calculate array of atoms positions in supercell"""
        
        pos = UC_Atoms
        
        for i in range(1,nv[0]+1):
            for j in range(1,nv[1]+1):
                for k in range(1,nv[2]+1):
                    if i==j==k==1:
                        pos = pos
                    else:
                        new_pos = np.array(Atoms*[i,j,k])
                        pos = np.append(pos,new_pos)
        
        
        
        """calculate number of atoms in supercell"""
        len_UnitCell = len(UC_Atoms)
        len_SuperCell = 0
        
        for i in range(len(nv)): 
            if nv[i]>1:
                len_SuperCell += len_UnitCell*nv[i]
                
                
                
        """matrix of atom positions in supercell"""
        Supercell_Atoms = np.reshape(pos,(len_SuperCell,3))
        
        
        return(Supercell_Atoms)

        
    
    def plot_Supercell(self):
        
        pos = self.SuperCell(Boundary)
        
        Fig = plt.figure()
        ax = plt.axes(projection='3d')
        ax.scatter(pos[:,0], pos[:,1], pos[:,2], color='blue',linewidth=10)
        ax.set_xticks([])
        ax.set_yticks([])
        ax.set_zticks([])

        plt.show()
        #plt.savefig('path/file.jpg',dpi=300)
